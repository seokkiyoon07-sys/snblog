name: Blog Notification (Jandi + Slack)

on:
  push:
    branches: [main]
    paths:
      - 'src/data/posts.ts'
      - 'src/app/**/page.tsx'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          # Check if posts.ts was modified
          if git diff --name-only HEAD~1 HEAD | grep -q "src/data/posts.ts"; then
            echo "posts_modified=true" >> $GITHUB_OUTPUT
          else
            echo "posts_modified=false" >> $GITHUB_OUTPUT
          fi

          # Check if any blog pages were modified
          if git diff --name-only HEAD~1 HEAD | grep -qE "src/app/(originals|startup|columns|problems|reviews|admissions)/.*/page\.tsx$"; then
            echo "pages_modified=true" >> $GITHUB_OUTPUT
          else
            echo "pages_modified=false" >> $GITHUB_OUTPUT
          fi

      - name: Send to Jandi and Slack
        if: steps.changes.outputs.posts_modified == 'true' || steps.changes.outputs.pages_modified == 'true'
        run: |
          # Get commit details
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"

          # Extract changed post info using Git diff analysis
          if [ "${{ steps.changes.outputs.posts_modified }}" == "true" ]; then
            # Determine diff range based on event type
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              DIFF_BASE="${{ github.base_ref }}"
              DIFF_HEAD="${{ github.sha }}"
            else
              # For push events, use before..after or fallback to HEAD~1..HEAD
              if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
                DIFF_BASE="${{ github.event.before }}"
              else
                DIFF_BASE="HEAD~1"
              fi
              DIFF_HEAD="${{ github.sha }}"
            fi
            
            echo "üîç Analyzing diff range: $DIFF_BASE..$DIFF_HEAD"
            
            # Get changed lines in posts.ts with line numbers and detect renames
            CHANGED_LINES=$(git diff --unified=10 --find-renames "$DIFF_BASE" "$DIFF_HEAD" -- src/data/posts.ts | grep -E "^\+.*\s+(id|title|excerpt|thumbnail|url):" | head -20)
            
            # Extract post ID from changed content (look for id: 'postname')
            CHANGED_POST_ID=$(echo "$CHANGED_LINES" | grep -oE "id:\s*['\"][^'\"]+['\"]" | head -1 | sed "s/id:\s*['\"]//; s/['\"]//")
            
            if [ -n "$CHANGED_POST_ID" ]; then
              echo "üìù Detected changed post ID: $CHANGED_POST_ID"
              
              # Extract post info for the specific changed post ID
              POST_BLOCK_START=$(grep -n "id: *['\"]$CHANGED_POST_ID['\"]" src/data/posts.ts | cut -d: -f1)
              if [ -n "$POST_BLOCK_START" ]; then
                # Get the post block (from id to the closing brace, max 100 lines)
                POST_BLOCK=$(sed -n "${POST_BLOCK_START},$((POST_BLOCK_START + 100))p" src/data/posts.ts | sed '/^  },$/q')
                
                # Extract fields from the post block
                POST_TITLE=$(echo "$POST_BLOCK" | grep -m 1 "title:" | sed "s/.*title: *['\"]//; s/['\"].*//")
                POST_EXCERPT=$(echo "$POST_BLOCK" | grep -m 1 "excerpt:" | sed "s/.*excerpt: *['\"]//; s/['\"].*//")
                POST_THUMBNAIL=$(echo "$POST_BLOCK" | grep -m 1 "thumbnail:" | sed "s/.*thumbnail: *['\"]//; s/['\"].*//")
                POST_URL=$(echo "$POST_BLOCK" | grep -m 1 "url:" | sed "s/.*url: *['\"]//; s/['\"].*//")
                
                echo "üìÑ Extracted post info:"
                echo "  Title: $POST_TITLE"
                echo "  URL: $POST_URL"
                echo "  Thumbnail: $POST_THUMBNAIL"
              fi
            fi
            
            # Fallback: if no specific post ID found, get the most recently modified post by date
            if [ -z "$CHANGED_POST_ID" ] || [ -z "$POST_TITLE" ]; then
              echo "‚ö†Ô∏è Fallback: Using most recent post by date"
              # Get all posts with dates and sort by date (newest first)
              LATEST_POST_LINE=$(grep -n -A 5 -B 2 "date: *['\"]20" src/data/posts.ts | sort -t: -k3 -r | head -1)
              if [ -n "$LATEST_POST_LINE" ]; then
                LATEST_POST_START=$(echo "$LATEST_POST_LINE" | cut -d- -f1)
                POST_BLOCK=$(sed -n "$((LATEST_POST_START - 10)),$((LATEST_POST_START + 50))p" src/data/posts.ts | sed -n '/^  {$/,/^  },$/p' | head -50)
                
                POST_TITLE=$(echo "$POST_BLOCK" | grep -m 1 "title:" | sed "s/.*title: *['\"]//; s/['\"].*//")
                POST_EXCERPT=$(echo "$POST_BLOCK" | grep -m 1 "excerpt:" | sed "s/.*excerpt: *['\"]//; s/['\"].*//")
                POST_THUMBNAIL=$(echo "$POST_BLOCK" | grep -m 1 "thumbnail:" | sed "s/.*thumbnail: *['\"]//; s/['\"].*//")
                POST_URL=$(echo "$POST_BLOCK" | grep -m 1 "url:" | sed "s/.*url: *['\"]//; s/['\"].*//")
              fi
            fi
            
            # Clean up title (remove newlines and extra spaces)
            POST_TITLE=$(echo "$POST_TITLE" | tr '\n' ' ' | sed 's/\\n/ /g' | xargs)
            POST_EXCERPT=$(echo "$POST_EXCERPT" | head -c 200)  # Limit excerpt length
            
            # Set thumbnail URL (use default if not found or invalid)
            if [ -z "$POST_THUMBNAIL" ] || [ "$POST_THUMBNAIL" = "undefined" ] || [ "$POST_THUMBNAIL" = "null" ]; then
              THUMBNAIL_URL="https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=200&fit=crop"
            else
              THUMBNAIL_URL="https://blog.snacademy.co.kr$POST_THUMBNAIL"
            fi
            
            # Set post URL
            if [ -n "$POST_URL" ] && [ "$POST_URL" != "undefined" ]; then
              FULL_POST_URL="https://blog.snacademy.co.kr$POST_URL"
            else
              FULL_POST_URL="https://blog.snacademy.co.kr"
            fi
            
            echo "üéØ Final notification data:"
            echo "  Title: $POST_TITLE"
            echo "  Excerpt: ${POST_EXCERPT:0:100}..."
            echo "  Thumbnail: $THUMBNAIL_URL"
            echo "  URL: $FULL_POST_URL"
          fi

          # Create message based on changes
          if [ "${{ steps.changes.outputs.posts_modified }}" == "true" ] && [ "${{ steps.changes.outputs.pages_modified }}" == "true" ]; then
            BODY="üîÑ Î∏îÎ°úÍ∑∏ ÏΩòÌÖêÏ∏†Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!"
            DESCRIPTION="ÏÉàÎ°úÏö¥ Í∏ÄÏù¥ Ï∂îÍ∞ÄÎêòÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§."
            COLOR="#FF6B6B"
            SLACK_COLOR="danger"
            JANDI_TITLE="üìù SN Academy Blog ÏóÖÎç∞Ïù¥Ìä∏"
          elif [ "${{ steps.changes.outputs.posts_modified }}" == "true" ]; then
            BODY="ÔøΩ ÏÉà Ìè¨Ïä§Ìä∏Í∞Ä Í≤åÏãúÎêòÏóàÏñ¥Ïöî!"
            DESCRIPTION="$POST_TITLE"
            COLOR="#4ECDC4"
            SLACK_COLOR="good"
            JANDI_TITLE="$POST_TITLE"
          else
            BODY="üìù ÏÉàÎ°úÏö¥ Î∏îÎ°úÍ∑∏ Í∏ÄÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!"
            DESCRIPTION="ÏÉàÎ°úÏö¥ ÌéòÏù¥ÏßÄÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
            COLOR="#45B7D1"
            SLACK_COLOR="good"
            JANDI_TITLE="üìù SN Academy Blog"
          fi

          # Send to Jandi
          if [ "${{ steps.changes.outputs.posts_modified }}" == "true" ]; then
            # New post notification with thumbnail and title
            curl -X POST "${{ secrets.JANDI_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"body\": \"$BODY\",
                \"connectColor\": \"$COLOR\",
                \"connectInfo\": [
                  {
                    \"title\": \"$JANDI_TITLE\",
                    \"description\": \"$POST_EXCERPT\",
                    \"imageUrl\": \"$THUMBNAIL_URL\"
                  }
                ],
                \"connectButtons\": [
                  {
                    \"name\": \"Ìè¨Ïä§Ìä∏ Î≥¥Í∏∞\",
                    \"type\": \"link\",
                    \"url\": \"$FULL_POST_URL\"
                  },
                  {
                    \"name\": \"Î∏îÎ°úÍ∑∏ Ìôà\",
                    \"type\": \"link\",
                    \"url\": \"https://blog.snacademy.co.kr\"
                  }
                ]
              }"
          else
            # General update notification
            curl -X POST "${{ secrets.JANDI_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"body\": \"$BODY\",
                \"connectColor\": \"$COLOR\",
                \"connectInfo\": [
                  {
                    \"title\": \"$JANDI_TITLE\",
                    \"description\": \"$DESCRIPTION\",
                    \"imageUrl\": \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=200&fit=crop\"
                  }
                ],
                \"connectButtons\": [
                  {
                    \"name\": \"Î∏îÎ°úÍ∑∏ Î≥¥Í∏∞\",
                    \"type\": \"link\",
                    \"url\": \"https://blog.snacademy.co.kr\"
                  },
                  {
                    \"name\": \"Ïª§Î∞ã Î≥¥Í∏∞\",
                    \"type\": \"link\",
                    \"url\": \"$COMMIT_URL\"
                  }
                ]
              }"
          fi

          # Send to Slack
          if [ "${{ steps.changes.outputs.posts_modified }}" == "true" ]; then
            # New post notification with thumbnail and title
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"$BODY\",
                \"attachments\": [
                  {
                    \"color\": \"$SLACK_COLOR\",
                    \"title\": \"$JANDI_TITLE\",
                    \"text\": \"$POST_EXCERPT\",
                    \"thumb_url\": \"$THUMBNAIL_URL\",
                    \"title_link\": \"$FULL_POST_URL\",
                    \"actions\": [
                      {
                        \"type\": \"button\",
                        \"text\": \"Ìè¨Ïä§Ìä∏ Î≥¥Í∏∞\",
                        \"url\": \"$FULL_POST_URL\"
                      },
                      {
                        \"type\": \"button\",
                        \"text\": \"Î∏îÎ°úÍ∑∏ Ìôà\",
                        \"url\": \"https://blog.snacademy.co.kr\"
                      }
                    ]
                  }
                ]
              }"
          else
            # General update notification
            curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"text\": \"$BODY\",
                \"attachments\": [
                  {
                    \"color\": \"$SLACK_COLOR\",
                    \"title\": \"$JANDI_TITLE\",
                    \"text\": \"$DESCRIPTION\",
                    \"thumb_url\": \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=200&fit=crop\",
                    \"actions\": [
                      {
                        \"type\": \"button\",
                        \"text\": \"Î∏îÎ°úÍ∑∏ Î≥¥Í∏∞\",
                        \"url\": \"https://blog.snacademy.co.kr\"
                      },
                      {
                        \"type\": \"button\",
                        \"text\": \"Ïª§Î∞ã Î≥¥Í∏∞\",
                        \"url\": \"$COMMIT_URL\"
                      }
                    ]
                  }
                ]
              }"
          fi
