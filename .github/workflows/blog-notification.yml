name: Blog Post Notification

on:
  push:
    branches: [main]
    paths:
      - 'src/data/posts.ts'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect post changes
        id: detect
        run: |
          # Check if posts.ts was modified
          if ! git diff HEAD~1 HEAD --name-only | grep -q "src/data/posts.ts"; then
            echo "No changes in posts.ts"
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Find allPosts array start line
          ALLPOSTS_START=$(grep -n "export const allPosts" src/data/posts.ts | cut -d: -f1)

          # Get the actual diff content
          DIFF_CONTENT=$(git diff HEAD~1 HEAD src/data/posts.ts)

          # Look for added posts (new posts)
          ADDED_POST_ID=""
          if echo "$DIFF_CONTENT" | grep -q "^+.*id:"; then
            # Find the first added post ID
            ADDED_POST_ID=$(echo "$DIFF_CONTENT" | grep "^+.*id:" | head -1 | grep -oE "id: *['\"][^'\"]*['\"]" | sed "s/id: *['\"]//; s/['\"].*//")
          fi

          # If no new post found, look for modified posts
          if [ -z "$ADDED_POST_ID" ]; then
            # Get changed lines and find the most recent post ID
            CHANGED_LINES=$(echo "$DIFF_CONTENT" | grep "^@@" | sed 's/.*+\([0-9]*\).*/\1/')
            
            for line in $CHANGED_LINES; do
              if [ "$line" -ge "$ALLPOSTS_START" ]; then
                # Find the post ID that contains this line
                POST_ID=$(sed -n "1,${line}p" src/data/posts.ts | grep -n "id:" | tail -1 | cut -d: -f2 | grep -oE "['\"][^'\"]*['\"]" | sed "s/['\"]//g")
                if [ ! -z "$POST_ID" ]; then
                  ADDED_POST_ID="$POST_ID"
                  break
                fi
              fi
            done
          fi

          if [ -z "$ADDED_POST_ID" ]; then
            echo "No post changes detected"
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "changed=true" >> $GITHUB_OUTPUT
          echo "post_id=$ADDED_POST_ID" >> $GITHUB_OUTPUT
          echo "üîç Detected post ID: $ADDED_POST_ID"

      - name: Extract post info
        id: extract
        if: steps.detect.outputs.changed == 'true'
        run: |
          POST_ID="${{ steps.detect.outputs.post_id }}"
          echo "üîç Extracting info for post ID: $POST_ID"

          # Find post block more accurately
          POST_BLOCK_START=$(grep -n "id: *['\"]${POST_ID}['\"]" src/data/posts.ts | cut -d: -f1)
          if [ -z "$POST_BLOCK_START" ]; then
            echo "‚ùå Post ID not found: $POST_ID"
            exit 1
          fi

          # Extract the complete post block
          POST_BLOCK=$(sed -n "${POST_BLOCK_START},/^  },$/p" src/data/posts.ts)

          # Extract post information with better parsing
          POST_TITLE=$(echo "$POST_BLOCK" | grep -A 1 "title:" | grep -oE "'[^']*'" | head -1 | sed "s/'//g")
          POST_EXCERPT=$(echo "$POST_BLOCK" | grep -A 3 "excerpt:" | grep -oE "'[^']*'" | head -1 | sed "s/'//g")
          POST_URL=$(echo "$POST_BLOCK" | grep -A 1 "url:" | grep -oE "'[^']*'" | head -1 | sed "s/'//g")
          POST_THUMBNAIL=$(echo "$POST_BLOCK" | grep -A 1 "thumbnail:" | grep -oE "'[^']*'" | head -1 | sed "s/'//g")

          # Validate extracted data
          if [ -z "$POST_TITLE" ] || [ -z "$POST_URL" ]; then
            echo "‚ùå Failed to extract post information"
            echo "Title: $POST_TITLE"
            echo "URL: $POST_URL"
            exit 1
          fi

          # Set outputs
          echo "title=$POST_TITLE" >> $GITHUB_OUTPUT
          echo "excerpt=$POST_EXCERPT" >> $GITHUB_OUTPUT
          echo "url=$POST_URL" >> $GITHUB_OUTPUT
          echo "thumbnail=$POST_THUMBNAIL" >> $GITHUB_OUTPUT

          # Debug output
          echo "üìÑ Extracted post info:"
          echo "  ID: $POST_ID"
          echo "  Title: $POST_TITLE"
          echo "  URL: $POST_URL"
          echo "  Thumbnail: $POST_THUMBNAIL"
          echo "  Excerpt: ${POST_EXCERPT:0:50}..."

      - name: Send Jandi notification
        if: steps.detect.outputs.changed == 'true'
        run: |
          POST_TITLE="${{ steps.extract.outputs.title }}"
          POST_EXCERPT="${{ steps.extract.outputs.excerpt }}"
          POST_URL="${{ steps.extract.outputs.url }}"
          POST_THUMBNAIL="${{ steps.extract.outputs.thumbnail }}"

          # Build URLs
          FULL_POST_URL="https://blog.snacademy.co.kr${POST_URL}"
          THUMBNAIL_URL="https://blog.snacademy.co.kr${POST_THUMBNAIL}"

          # Create notification message
          BODY="ÏÉà Ìè¨Ïä§Ìä∏Í∞Ä Í≤åÏãúÎêòÏóàÏñ¥Ïöî - ${POST_TITLE}"

          # Send to Jandi
          curl -X POST "https://wh.jandi.com/connect-api/webhook/13116580/2eb500fa1618a7c8b4d5ee7e29b46523" \
            -H "Content-Type: application/json" \
            -d "{
              \"body\": \"${BODY}\",
              \"connectColor\": \"#FAC11B\",
              \"connectInfo\": [
                {
                  \"title\": \"${POST_TITLE}\",
                  \"description\": \"${POST_EXCERPT}\n\nÌè¨Ïä§Ìä∏ URL: ${FULL_POST_URL}\nÎ∏îÎ°úÍ∑∏ Ìôà: https://blog.snacademy.co.kr\"
                }
              ],
              \"connectButtons\": [
                {
                  \"name\": \"Ìè¨Ïä§Ìä∏ Î≥¥Í∏∞\",
                  \"type\": \"link\",
                  \"url\": \"${FULL_POST_URL}\"
                },
                {
                  \"name\": \"Î∏îÎ°úÍ∑∏ Ìôà\",
                  \"type\": \"link\",
                  \"url\": \"https://blog.snacademy.co.kr\"
                }
              ]
            }"

          echo "‚úÖ Jandi notification sent successfully!"
